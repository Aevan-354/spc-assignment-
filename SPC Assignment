NJUGUNA AEVAN
PA101/G/10586/20
SYSTEM PROGRAMMIG ASSIGNMENT 1
QUIZ 1
#include <stdio.h>   // Standard I/O operations
#include <stdlib.h>  // Standard library functions
#include <fcntl.h>   // File control options
#include <unistd.h>  // POSIX operating system API

int main() {
    int file_descriptor;  // File descriptor for the file

    // Open a file named "example.txt" in write mode.
    // If the file doesn't exist, it will be created; if it does, its content will be truncated.
    file_descriptor = open("example.txt", O_WRONLY | O_CREAT | O_TRUNC, 0644);

    // Check if file opening was successful
    if (file_descriptor == -1) {
        perror("Error opening file");
        exit(EXIT_FAILURE); // Exit the program with failure status
    }

    // Write "Hello World" string to the file
    if (write(file_descriptor, "Hello World\n", 12) == -1) {
        perror("Error writing to file");
        exit(EXIT_FAILURE); // Exit the program with failure status
    }

    // Close the file
    if (close(file_descriptor) == -1) {
        perror("Error closing file");
        exit(EXIT_FAILURE); // Exit the program with failure status
    }
    // Reopen the file in read mode
    file_descriptor = open("example.txt", O_RDONLY);
    if (file_descriptor == -1) {
        perror("Error opening file");
        exit(EXIT_FAILURE); // Exit the program with failure status
    }
    // Buffer to store the read content
    char buffer[100];
    // Read content from the file into the buffer
    ssize_t bytes_read = read(file_descriptor, buffer, sizeof(buffer));
    // Check if reading was successful
    if (bytes_read == -1) {
        perror("Error reading file");
        exit(EXIT_FAILURE); // Exit the program with failure status
    }
    // Print the read content
    printf("Content read from file: %.*s\n", (int)bytes_read, buffer);
    // Close the file
    if (close(file_descriptor) == -1) {
        perror("Error closing file");
        exit(EXIT_FAILURE); // Exit the program with failure status
    }

    return 0; // Exit the program successfully

QUIZ  2
#!/bin/bash
# Prompt the user to enter CustomerID, CustomerName, and UnitConsumed
read -p "Enter Customer ID: " customer_id
read -p "Enter Customer Name: " customer_name
read -p "Enter Units Consumed: " units_consumed

# Initialize variables for charges per unit and surcharge
charge_per_unit=0
surcharge=0

# Use if-else statement to determine charges per unit based on units consumed
if [ $units_consumed -lt 200 ]; then
    charge_per_unit=120
elif [ $units_consumed -ge 200 ] && [ $units_consumed -lt 400 ]; then
    charge_per_unit=150
elif [ $units_consumed -ge 400 ] && [ $units_consumed -lt 600 ]; then
    charge_per_unit=180
else
    charge_per_unit=200
fi

# Calculate total bill
total_bill=$(echo "$units_consumed * $charge_per_unit" | bc)


# Display the bill details
echo "Customer ID: $customer_id"
echo "Customer Name: $customer_name"
echo "Units Consumed: $units_consumed"
echo "Charges per Unit: Ksh $charge_per_unit"
echo "Total Bill: Ksh $total_bill" 

QUIZ 3
#!/bin/bash
# Prompt the user to enter employee name, hours worked, and rate per hour
read -p "Enter employee name: " name
read -p "Enter hours worked: " hours_worked
read -p "Enter rate per hour: " rate_per_hour

# Calculate basic pay
basic_pay=$(echo "$hours_worked * $rate_per_hour" | bc)

# Calculate tax based on basic pay
if [ $(echo "$basic_pay > 70000" | bc) -eq 1 ]; then
    tax=$(echo "0.25 * $basic_pay" | bc)
elif [ $(echo "$basic_pay >= 15000" | bc) -eq 1 ]; then
    tax=$(echo "0.15 * $basic_pay" | bc)
else
    tax=0
fi
# Calculate net pay
net_pay=$(echo "$basic_pay - $tax" | bc)

# Display results
echo "Employee Name: $name"
echo "Basic Pay: $basic_pay"
echo "Tax: $tax"
echo "Net Pay: $net_pay"




